set nocompatible              " be iMproved, required
filetype off                  " required

let mapleader=","
runtime plugins.vim
runtime mappings.vim

let g:python_host_prog = expand('~/.pyenv/versions/neovim2/bin/python')
let g:python3_host_prog = expand('~/.pyenv/versions/neovim3/bin/python')


set laststatus=2
let g:airline_powerline_fonts = 1
set nofoldenable

filetype plugin indent on    " required

" Go config
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_fmt_command = "goimports"

let g:go_list_type = "quickfix"

let g:tsuquyomi_disable_quickfix = 1
let g:tsuquyomi_use_vimproc=1

syntax enable " Turn on syntax highlighting
set history=1000 " By default Vim saves your last 8 commands
set number " Set the line numbers
set encoding=utf-8
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set hidden

" Note that the dot is a unicode character
set list lcs=trail:·,tab:»·,trail:·
set hlsearch
set incsearch
set ignorecase
set smartcase

set backupcopy=yes

set backupdir=~/.vim/backup
set directory=~/.vim/backup

set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*,node_modules,tmp,project/target,target,tags,CMakeFiles,bower_components,dist,_darcs,vcr,app/assets/images,*.dSYM,*.pyc,_build,deps,rel

set t_Co=256
set bg=dark
let base16colorspace=256  " Access colors present in 256 colorspace
color base16-default

" Remember last location in file
aug last_location
  au!
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
aug END

" Save undo history
if has('persistent_undo')
  set undofile
  if !isdirectory(expand('~/.vimundo'))
    silent !mkdir ~/.vimundo > /dev/null 2>&1
  endif
  set undodir=~/.vimundo
endif

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Show (partial) command in the status line
set showcmd
set cursorline
set tags+=gems.tags

aug various_file_types
  au!
  " Rakefile, Vagrantfile and Gemfile are Ruby
  au BufRead,BufNewFile {Capfile,Gemfile,Rakefile,Vagrantfile,config.ru} set ft=ruby
  au BufNewFile,BufRead *.json set filetype=javascript
  au BufNewFile,BufRead *.slime set filetype=slim
  au BufNewFile,BufRead *.conf set filetype=conf
  au BufNewFile,BufRead *vimrc set filetype=vim
aug END

set pastetoggle=<F5>

autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

set mouse=a
set exrc
set secure

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

"Settings for Vim Rspec plugin
let g:rspec_command = "VimuxRunCommand 'rspec {spec}'"

command W w

if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif


" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

let g:UltiSnipsExpandTrigger       = "<tab>"
let g:UltiSnipsJumpForwardTrigger  = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:UltiSnipsSnippetDirectories  = ["snips"]

function! g:UltiSnips_Complete()
  call UltiSnips#ExpandSnippet()
  if g:ulti_expand_res == 0
    if pumvisible()
      return "\<C-n>"
    else
      call UltiSnips#JumpForwards()
      if g:ulti_jump_forwards_res == 0
        return "\<TAB>"
      endif
    endif
  endif
  return ""
endfunction

au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
