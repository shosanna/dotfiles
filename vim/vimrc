set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'   " required
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'
Plugin 'vim-ruby/vim-ruby'
Plugin 'chriskempson/base16-vim'
Plugin 'wincent/Command-T'
Plugin 'dag/vim2hs'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'benmills/vimux'
Plugin 'thoughtbot/vim-rspec'
Plugin 'slim-template/vim-slim'
Plugin 'tomtom/tcomment_vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'rhysd/vim-clang-format'
Plugin 'headerguard'

Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-bundler'
Plugin 'tpope/vim-rake'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-fireplace'
Plugin 'tpope/vim-dispatch'
Plugin 'elixir-lang/vim-elixir'

Plugin 'Raimondi/delimitMate'
Plugin 'scrooloose/nerdtree'

set nofoldenable

call vundle#end()            " required
filetype plugin indent on    " required

syntax enable " Turn on syntax highlighting
set history=1000 " By default Vim saves your last 8 commands
set number " Set the line numbers
set encoding=utf-8

set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" Note that the dot is a unicode character
set list listchars=tab:\ \ ,trail:Â·

set hlsearch
set incsearch
set ignorecase
set smartcase

let mapleader=","

set backupdir=~/.vim/backup
set directory=~/.vim/backup

set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*,node_modules,tmp,project/target,target,tags,CMakeFiles,bower_components,dist,_darcs,vcr,app/assets/images,*.dSYM,*.pyc,_build,deps,rel

set t_Co=256
set bg=dark
let base16colorspace=256  " Access colors present in 256 colorspace
color base16-default

" Remember last location in file
aug last_location
  au!
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
aug END

" Save undo history
if has('persistent_undo')
  set undofile
  if !isdirectory(expand('~/.vimundo'))
    silent !mkdir ~/.vimundo > /dev/null 2>&1
  endif
  set undodir=~/.vimundo
endif

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Show (partial) command in the status line
set showcmd

set cursorline

cnoremap %% <C-R>=expand('%:h').'/'<CR>

" For easier navigation between windows
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-h> <C-w><C-h>
nnoremap <C-l> <C-w><C-l>

" Switching between active files in a buffer.
nnoremap <leader><leader> <c-^>

" Open files with <leader>f
noremap <leader>f  :CommandTFlush<cr>\|:CommandT ./<CR>

" Open files, limited to the directory of the current files, with <leader>gf
noremap <leader>F  :CommandTFlush<cr>\|:CommandT %%<CR>
noremap <leader>gf :CommandTFlush<cr>\|:CommandT %%<CR>

" Rails specific keystrokes
noremap <leader>gr :topleft :split config/routes.rb<CR>
noremap <leader>gg :topleft 50 :split Gemfile<CR>

noremap <leader>gv :CommandTFlush<cr>\|:CommandT ./app/views<cr>
noremap <leader>gc :CommandTFlush<cr>\|:CommandT ./app/controllers<cr>
noremap <leader>gm :CommandTFlush<cr>\|:CommandT ./app/models<cr>
noremap <leader>gs :CommandTFlush<cr>\|:CommandT ./app/services<cr>
noremap <leader>gh :CommandTFlush<cr>\|:CommandT ./app/helpers<cr>
noremap <leader>gd :CommandTFlush<cr>\|:CommandT ./app/decorators<cr>
noremap <leader>gl :CommandTFlush<cr>\|:CommandT ./lib<cr>
noremap <leader>gt :CommandTFlush<cr>\|:CommandT ./spec<cr>
noremap <leader>gk :CommandTFlush<cr>\|:CommandT ./app/assets/stylesheets<cr>
noremap <leader>gj :CommandTFlush<cr>\|:CommandT ./app/assets/javascripts<cr>
noremap <leader>ga :CommandTFlush<cr>\|:CommandT ./app/assets/javascripts/templates<cr>
noremap <leader>ge :CommandTFlush<cr>\|:CommandT ./app/cells<cr>

noremap <leader>da :CommandTFlush<cr>\|:CommandT app/assets/javascripts/templates<cr>
noremap <leader>dv :CommandTFlush<cr>\|:CommandT app/assets/javascripts/views<cr>
noremap <leader>dc :CommandTFlush<cr>\|:CommandT app/assets/javascripts/controllers<cr>
noremap <leader>dr :CommandTFlush<cr>\|:CommandT app/assets/javascripts/routes<cr>
noremap <leader>dm :CommandTFlush<cr>\|:CommandT app/assets/javascripts/models<cr>

noremap <leader>ct :!ctags --extra=+f -R *<CR>
set tags+=gems.tags
nnoremap <CR> :nohlsearch<CR>/<BS>


" Vim Rspec bindings
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>T :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

map <Leader>w :call VimuxRunCommand(input("prikaz> "))<CR>
map <Leader>q :call VimuxRunCommand(substitute(getline(line(".")),"^\\s*","",""))<CR>

set pastetoggle=<F5>

let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = ' -std=c++1y -stdlib=libc++'

autocmd FileType h,cc,c,cpp nnoremap <buffer><C-e> :<C-u>ClangFormat<CR>
autocmd FileType h,cc,c,cpp nnoremap <buffer><leader>ha :HeaderguardAdd<CR>
autocmd FileType h,cc,c,cpp vnoremap <buffer><C-e> :ClangFormat<CR>

nnoremap <Up> <C-w>5-
nnoremap <Down> <C-w>5+
nnoremap <Left> <C-w>5<
nnoremap <Right> <C-w>5>

set mouse=a
set exrc
set secure

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

"Settings for Vim Rspec plugin
let g:rspec_command = "VimuxRunCommand 'rspec {spec}'"

command W w
